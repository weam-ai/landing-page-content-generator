const mongoose = require('mongoose');

const BusinessInfoSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: true
  },
  businessName: {
    type: String,
    required: [true, 'Please add a business name'],
    trim: true,
    maxlength: [100, 'Business name cannot be more than 100 characters']
  },
  businessOverview: {
    type: String,
    required: [true, 'Please add a business overview'],
    maxlength: [1000, 'Business overview cannot be more than 1000 characters']
  },
  targetAudience: {
    type: String,
    required: [true, 'Please add target audience information'],
    maxlength: [500, 'Target audience cannot be more than 500 characters']
  },
  brandTone: {
    type: String,
    enum: ['professional', 'friendly', 'playful', 'authoritative', 'casual'],
    required: false
  },
  contentLength: {
    type: String,
    enum: ['short', 'medium', 'long', 'custom'],
    default: 'medium'
  },
  customContentLength: {
    type: Number,
    min: 50,
    max: 1000
  },
  websiteUrl: {
    type: String,
    match: [
      /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/,
      'Please add a valid URL'
    ]
  },
  // Auto-generated fields from Gemini
  autoGenerated: {
    isAutoGenerated: {
      type: Boolean,
      default: false
    },
    generatedAt: Date,
    sourceUrl: String,
    generatedContent: {
      businessDescription: String,
      services: [String],
      valueProposition: String,
      industry: String,
      companySize: String,
      foundedYear: String,
      location: String,
      contactInfo: {
        email: String,
        phone: String,
        address: String
      },
      socialMedia: {
        linkedin: String,
        twitter: String,
        facebook: String,
        instagram: String
      },
      keyFeatures: [String],
      testimonials: [String],
      pricing: [String]
    }
  },
  // Manual override fields
  manualOverrides: {
    businessDescription: String,
    services: [String],
    valueProposition: String,
    industry: String,
    companySize: String,
    foundedYear: String,
    location: String,
    contactInfo: {
      email: String,
      phone: String,
      address: String
    },
    socialMedia: {
      linkedin: String,
      twitter: String,
      facebook: String,
      instagram: String
    },
    keyFeatures: [String],
    testimonials: [String],
    pricing: [String]
  },
  status: {
    type: String,
    enum: ['draft', 'active', 'archived'],
    default: 'draft'
  },
  tags: [String],
  isPublic: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Index for better query performance
BusinessInfoSchema.index({ user: 1, createdAt: -1 });
BusinessInfoSchema.index({ status: 1, isPublic: 1 });
BusinessInfoSchema.index({ tags: 1 });

// Virtual for getting final business description (manual override takes precedence)
BusinessInfoSchema.virtual('finalBusinessDescription').get(function() {
  return this.manualOverrides?.businessDescription || 
         this.autoGenerated?.generatedContent?.businessDescription || 
         this.businessOverview;
});

// Virtual for getting final services (manual override takes precedence)
BusinessInfoSchema.virtual('finalServices').get(function() {
  return this.manualOverrides?.services || 
         this.autoGenerated?.generatedContent?.services || 
         [];
});

// Virtual for getting final value proposition (manual override takes precedence)
BusinessInfoSchema.virtual('finalValueProposition').get(function() {
  return this.manualOverrides?.valueProposition || 
         this.autoGenerated?.generatedContent?.valueProposition || 
         '';
});

// Ensure virtual fields are serialized
BusinessInfoSchema.set('toJSON', { virtuals: true });

module.exports = mongoose.model('BusinessInfo', BusinessInfoSchema);
